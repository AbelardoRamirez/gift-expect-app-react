{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","App.js","serviceWorker.js","index.js"],"names":["AddCategory","setCategories","useState","newCategorie","setNewCategorie","className","type","onChange","e","target","value","onClick","length","cat","console","log","getGifs","category","a","fetch","encodeURI","resp","json","data","categoria","map","img","id","title","import_datetime","imagen","images","original","url","source","GifGrid","loading","state","setState","useEffect","then","setTimeout","useFetchGifs","imagenes","key","src","alt","GifExpertApp","categories","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d160d110.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n    const [newCategorie, setNewCategorie] = useState('');\r\n\r\n    const handleClick = () => {\r\n        if (newCategorie !== '' && newCategorie.length > 3) {\r\n            setCategories(cat => [newCategorie, ...cat]);\r\n            setNewCategorie('');\r\n        } else {\r\n            console.log('====================================');\r\n            console.log(`La Categoria debe de contener >= 3 caracteres`);\r\n            console.log('====================================');\r\n        }\r\n    }\r\n\r\n    const handleNewCategorie = (e) => {\r\n        setNewCategorie(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"row border my-2 shadow-lg\">\r\n            <div className=\"col\">\r\n                <input type=\"text\" className=\"form-control my-2\" onChange={handleNewCategorie} value={newCategorie} />\r\n                <button className=\"btn btn-block btn-dark my-2\" onClick={handleClick}>\r\n                    Agregar Nuevo Elemento\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","\r\nexport const getGifs = async (category) => {\r\n    const resp = await fetch(`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=20&api_key=Us5ddAo4CXQDQjg5xYxz2uFrH73kiYmw`);\r\n    const { data } = await resp.json();\r\n    const categoria = data.map(img => ({ type: img.type, id: img.id, title: img.title, import_datetime: img.import_datetime, imagen: img.images.original.url, source: img.source }));\r\n    return categoria;\r\n}","import React, { useEffect } from 'react';\r\n//import { getGifs } from '../helpers/GetGifs';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n\r\n\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    const { loading, data: imagenes } = useFetchGifs(category);\r\n\r\n    useEffect(() => {\r\n\r\n    }, [category]);\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            {\r\n                loading\r\n                &&\r\n                <div className=\"col animate__animated animate__repeat-2 animate__flash\">\r\n                    <h6 className=\"h6 font-weight-lighter text-muted\">Loading Content Please Wait...</h6>\r\n                </div>\r\n            }\r\n            {!loading && imagenes.map(({ id, type, imagen, title, import_datetime, source }) => {\r\n                return (\r\n                    <div key={id} className=\"col-3 animate__animated animate__fadeIn\">\r\n                        <hr className=\"hr shadow-lg border\" />\r\n                        <div className=\"card text-center\">\r\n                            <div className=\"card-header\">\r\n                                T: <span className=\"font-weight-bolder\">{type}</span> - ID: <span className=\"font-weight-lighter\">{id}</span>\r\n                            </div>\r\n                            <div className=\"card-body\">\r\n                                <img src={imagen} alt={title} className=\"img-fluid\" />\r\n                                <h5 className=\"card-title\">{title}</h5>\r\n                                <p className=\"card-text\">Source: <span className=\"font-weight-lighter text-monospace\">{source}</span></p>\r\n                            </div>\r\n                            <div className=\"card-footer text-muted\">\r\n                                {import_datetime}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/GetGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category).then(resp => {\r\n            setTimeout(() => {\r\n                setState({\r\n                    data: resp,\r\n                    loading: false,\r\n                });\r\n            }, 3500);\r\n        })\r\n    }, [category]);\r\n\r\n    return state;\r\n};\r\n","import React, { useState } from 'react'\r\nimport AddCategory from './AddCategory';\r\nimport { GifGrid } from './GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    return (\r\n        <div className=\"row justify-content-center\">\r\n            <div className=\"col\">\r\n                <h2 className=\"h2 font-weight-lighter text-center text-muted my-3\">\r\n                    GiftExpertApp\r\n                </h2>\r\n                <AddCategory setCategories={setCategories} />\r\n                <hr className=\"hr shadow-lg\" />\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col\">\r\n                        {\r\n                            categories.map(cat => (<GifGrid category={cat} key={cat} />))\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default GifExpertApp","import React from 'react';\nimport GifExpertApp from './components/GifExpertApp';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <GifExpertApp />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'animate.css'\nimport 'jquery/dist/jquery';\nimport 'bootstrap/dist/js/bootstrap.bundle';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}